/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package cashier;

import connection.MyConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.SpinnerModel;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import login.Login;

/**
 *
 * @author koles
 */
public class CreateCheck extends javax.swing.JFrame {

    Connection con = MyConnection.getConnection();
    String clientCard;
    int clientDiscount;
    static int id;
    boolean clientAdded = false;
    boolean checkCreated = false;
    /**
     * Creates new form Check
     */
    public CreateCheck() {
        initComponents();
        init();
    }

    
    private void init() {
        jComboBox1.addItem("All");
        try{
           
            PreparedStatement ps;
            ps = con.prepareStatement("SELECT * FROM category");
            ResultSet rs = ps.executeQuery();
            ArrayList<String> categories = new ArrayList<String>();
            while (rs.next()) {
                categories.add(rs.getString(2));
            }      
            for (String str: categories) {
                jComboBox1.addItem(str);
            }
           
                    
        } catch (SQLException ex) {
            Logger.getLogger(Login.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField1 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        makeCheck = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jSpinner1 = new javax.swing.JSpinner();
        jLabel7 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Create Check");
        setBackground(new java.awt.Color(204, 255, 204));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        jPanel1.setBackground(new java.awt.Color(204, 255, 255));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Price", "Discount", "Quantity", "Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setColumnSelectionAllowed(true);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTable2);
        jTable2.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jLabel1.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Search Product");
        jLabel1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        jComboBox1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N

        jTextField1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jLabel2.setText("Category");

        jLabel3.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jLabel3.setText("Name");

        jButton1.setBackground(new java.awt.Color(255, 255, 153));
        jButton1.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jButton1.setText("Search");
        jButton1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton1MouseClicked(evt);
            }
        });
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(255, 255, 153));
        jButton2.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jButton2.setText("Add");
        jButton2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton2MouseClicked(evt);
            }
        });
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Times New Roman", 0, 36)); // NOI18N
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("Check");

        jLabel5.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel5.setText("Total:");

        jLabel6.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel6.setText("0,0");

        jButton3.setBackground(new java.awt.Color(255, 255, 153));
        jButton3.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jButton3.setText("Delete item");
        jButton3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton3MouseClicked(evt);
            }
        });
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(255, 255, 153));
        jButton4.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jButton4.setText("Clean");
        jButton4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton4MouseClicked(evt);
            }
        });
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        makeCheck.setBackground(new java.awt.Color(255, 255, 153));
        makeCheck.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        makeCheck.setText("Complete");
        makeCheck.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                makeCheckClick(evt);
            }
        });

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Id", "Name", "Price", "Discount", "Quantity", "Category", "Expiration date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.setColumnSelectionAllowed(true);
        jTable3.getTableHeader().setReorderingAllowed(false);
        jScrollPane3.setViewportView(jTable3);
        jTable3.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);

        jSpinner1.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        int min = 1;
        int max = 1000;
        int step = 1;
        int i = 1;
        SpinnerModel value = new SpinnerNumberModel(i, min, max, step);
        jSpinner1.setModel(value);

        jLabel7.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jLabel7.setText("Quantity");

        jTextField2.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jLabel8.setText("Client card");

        jButton7.setBackground(new java.awt.Color(255, 255, 153));
        jButton7.setFont(new java.awt.Font("Monospaced", 0, 18)); // NOI18N
        jButton7.setText("Add card");
        jButton7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jButton7MouseClicked(evt);
            }
        });
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLabel9.setText("VAT:");

        jLabel10.setFont(new java.awt.Font("Times New Roman", 0, 24)); // NOI18N
        jLabel10.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel10.setText("0,0");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSpinner1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(221, 221, 221))
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField1)
                    .addComponent(jTextField2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createSequentialGroup()
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(makeCheck, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 600, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton1)
                            .addComponent(jButton2))
                        .addGap(24, 24, 24))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addGap(8, 8, 8)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7)
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton3)
                            .addComponent(jButton4))
                        .addGap(18, 18, 18)
                        .addComponent(makeCheck))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton1MouseClicked
        DefaultTableModel dm = (DefaultTableModel)jTable3.getModel();
        while(dm.getRowCount() > 0) {
            dm.removeRow(0);
        }
        String category = String.valueOf(jComboBox1.getSelectedItem());
        String name = jTextField1.getText();
       
        PreparedStatement ps;
        ResultSet rs;
        try {
            if (category.equals("All") && !name.isEmpty()) {
                ps = con.prepareStatement("SELECT store_product.id AS id, product.name AS name, price, quantity, category.name AS category_name, expiration_date "
                                        + "FROM store_product "
                                        + "INNER JOIN product ON store_product.fk_product = product.id "
                                        + "INNER JOIN category ON product.fk_category = category.id "
                                        + "WHERE instr(product.name, ?) > 0 "
                        + "ORDER BY name ASC");
                ps.setString(1,name);
                rs = ps.executeQuery();
            }
            else if (category.equals("All") && name.isEmpty()) {
                ps = con.prepareStatement("SELECT store_product.id AS id, product.name AS name, price, quantity, category.name AS category_name, expiration_date "
                                        + "FROM store_product "
                                        + "INNER JOIN product ON store_product.fk_product = product.id "
                                        + "INNER JOIN category ON product.fk_category = category.id "
                        + "ORDER BY name ASC");
                rs = ps.executeQuery();
            }
            else if (!name.isEmpty()){
                ps = con.prepareStatement("SELECT store_product.id AS id, product.name AS name, price, quantity, category.name AS category_name, expiration_date "
                        + "FROM store_product "
                        + "INNER JOIN product ON store_product.fk_product = product.id "
                        + "INNER JOIN category ON product.fk_category = category.id "
                        + "WHERE instr(product.name, ?) > 0 AND category_name = ? "
                        + "ORDER BY name ASC");
                ps.setString(1,name);
                ps.setString(2,category);
                rs = ps.executeQuery();
            }
            else {
                ps = con.prepareStatement("SELECT store_product.id AS id, product.name AS name, price, quantity, category.name AS category_name, expiration_date "
                        + "FROM store_product "
                        + "INNER JOIN product ON store_product.fk_product = product.id "
                        + "INNER JOIN category ON product.fk_category = category.id "
                        + "WHERE category_name = ? "
                        + "ORDER BY name ASC");
                ps.setString(1,category);
                rs = ps.executeQuery();
            }
            LocalDate nowDate = LocalDate.now();
            String now = String.valueOf(nowDate);
            while(rs.next()) {
                int productDiscount = 0;
                if (rs.getString("expiration_date").equals(now)) {
                    productDiscount = 20;
                }
                dm.addRow(new Object[]{rs.getString("id"), 
                    rs.getString("name"), 
                    rs.getString("price"),
                    String.valueOf(productDiscount), 
                    rs.getString("quantity"), 
                    rs.getString("category_name"),
                    rs.getString("expiration_date")});
            }
            
        } catch (SQLException ex) {
            Logger.getLogger(CreateCheck.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton1MouseClicked

    private void jButton2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton2MouseClicked
        int row = -1;
        row = jTable3.getSelectedRow();
        boolean exists = false;
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Product not selected", "Add falied",2);
        }
        else {
            for (int k = 0; k < jTable2.getRowCount(); k++) {
                String id = String.valueOf(jTable2.getValueAt(k, 0));
                if (id.equals(String.valueOf(jTable3.getValueAt(row, 0)))) {
                   
                    int quantity = Integer.parseInt(String.valueOf(jSpinner1.getValue()));
                    int existingQuantity = Integer.parseInt(String.valueOf(jTable2.getValueAt(k, 4)));
                    
                    if (quantity > Integer.parseInt(jTable3.getValueAt(row,4).toString())) {
                        JOptionPane.showMessageDialog(this, "Quntity is greater then available", "Quantity error",2);
                    }
                    else {
                        jTable2.setValueAt(quantity + existingQuantity, k, 4);
                        int discount = Integer.parseInt(jTable3.getValueAt(row,3).toString());
                        double price = Double.parseDouble(jTable3.getValueAt(row,2).toString());
                        double total = ((quantity + existingQuantity) * price * (100-(discount + clientDiscount))) / 100;
                        jTable2.setValueAt(total, k, 5);

                    }
                exists = true;
                }
            }
            
            if (!exists) {
                
            
            int discount = Integer.parseInt(jTable3.getValueAt(row,3).toString());
            double price = Double.parseDouble(jTable3.getValueAt(row,2).toString());
            int quantity = Integer.parseInt(String.valueOf(jSpinner1.getValue()));
            if (quantity > Integer.parseInt(jTable3.getValueAt(row,4).toString())) {
                JOptionPane.showMessageDialog(this, "Quntity is greater then available", "Quantity error",2);
            }
            else {
                double total = (quantity * price * (100-(discount + clientDiscount))) / 100;
            DefaultTableModel dm = (DefaultTableModel)jTable2.getModel();
            dm.addRow(new Object[]{jTable3.getValueAt(row, 0),
                jTable3.getValueAt(row, 1), 
                price, 
                discount + clientDiscount,
                quantity,
                total
                });
            int existingQuantity = Integer.parseInt(jTable3.getValueAt(row,4).toString());
            jTable3.setValueAt(existingQuantity - quantity, row, 4);
                
            }
            }
            double total = 0;
            for (int i = 0; i < jTable2.getRowCount(); i++) {
                total += Double.parseDouble(jTable2.getValueAt(i,5).toString());
            }
            jLabel6.setText(String.valueOf(total));
            jLabel10.setText(String.valueOf(total*0.2));
            checkCreated = false;
            
            
        }
    }//GEN-LAST:event_jButton2MouseClicked

    private void jButton7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton7MouseClicked
       if (clientAdded) JOptionPane.showMessageDialog(this, "Client card already added", "Client added",2);
       else {
           try {
            PreparedStatement ps;
            ResultSet rs;
            ps = con.prepareStatement("SELECT * FROM client WHERE id = ?");
            ps.setString(1,jTextField2.getText());
            rs = ps.executeQuery();
            if (rs.next()) {
                clientCard = jTextField2.getText();
                clientDiscount = rs.getInt("percent");
                clientAdded = true;
                JOptionPane.showMessageDialog(this, "Client card added");
            }else {
                JOptionPane.showMessageDialog(this, "Client card not found", "Client init falied",2);
            }
         
        } catch (SQLException ex) {
            Logger.getLogger(CreateCheck.class.getName()).log(Level.SEVERE, null, ex);
           
        }
       }
        
        
    }//GEN-LAST:event_jButton7MouseClicked

    private void jButton4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton4MouseClicked
        DefaultTableModel dm1 = (DefaultTableModel)jTable2.getModel();
                while(dm1.getRowCount() > 0) {
                    dm1.removeRow(0);
                }
                DefaultTableModel dm2 = (DefaultTableModel)jTable3.getModel();
                
                while(dm2.getRowCount() > 0) {
                    dm2.removeRow(0);
                }
                clientAdded = false;
                clientCard = null;
        double total = 0;
            for (int i = 0; i < jTable2.getRowCount(); i++) {
                total += Double.parseDouble(jTable2.getValueAt(i,5).toString());
            }
            jLabel6.setText(String.valueOf(total));
            jLabel10.setText(String.valueOf(total*0.2));
            
        checkCreated = false;
    }//GEN-LAST:event_jButton4MouseClicked

    private void jButton3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton3MouseClicked
        DefaultTableModel dm = (DefaultTableModel)jTable2.getModel();
        int row = -1;
        row = jTable2.getSelectedRow();
        if (row == -1) {
            JOptionPane.showMessageDialog(this, "Product not selected", "Delete falied",2);
        }
        else {
            dm.removeRow(row);
            checkCreated = false;
            double total = 0;
            for (int i = 0; i < jTable2.getRowCount(); i++) {
                total += Double.parseDouble(jTable2.getValueAt(i,5).toString());
            }
            jLabel6.setText(String.valueOf(total));
            jLabel10.setText(String.valueOf(total*0.2));
            checkCreated = false;
        }
        
    }//GEN-LAST:event_jButton3MouseClicked

    private void makeCheckClick(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_makeCheckClick
        if (checkCreated) 
        {
            JOptionPane.showMessageDialog(this, "Check already created", "Check create fail",2);
        }
        else {
          
        LocalDateTime now = LocalDateTime.now();
        String nowstr = String.valueOf(now);
        String idCheck = null;
        try {
            con.close();
            con = MyConnection.getConnection();
            PreparedStatement ps;
                ps = con.prepareStatement("INSERT INTO 'check' (fk_employee, fk_client, date, total, vat) VALUES(?, ?, ?, ?, ?)");
                ps.setString(1,String.valueOf(id));
                ps.setString(2, clientCard);
                ps.setString(3, nowstr);
                ps.setString(4, jLabel6.getText());
                ps.setString(5,jLabel10.getText());
                int row = ps.executeUpdate();
                JOptionPane.showMessageDialog(this, "Check created");
                checkCreated = true;
                
              
            } catch (SQLException ex) {
                Logger.getLogger(CreateCheck.class.getName()).log(Level.SEVERE, null, ex);
            }
         
         try {
             PreparedStatement ps;
             ps = con.prepareStatement("SELECT id FROM 'check' WHERE date = ?");
             ps.setString(1,nowstr);
             ResultSet rs = ps.executeQuery();
            
             if (rs.next()) {
                 idCheck = rs.getString("id");
             }
             
             
         } catch (SQLException ex) {
             Logger.getLogger(CreateCheck.class.getName()).log(Level.SEVERE, null, ex);
         }
         int items = jTable2.getRowCount();
        
        for (int i = 0; i < items; i++) {
            
            try {
                PreparedStatement ps;
                ps = con.prepareStatement("INSERT INTO sale (fk_check, fk_store_product, price, discount, quantity, total) VALUES(?, ?, ?, ?, ?, ?)");
                ps.setString(1, idCheck);
                ps.setString(2, String.valueOf(jTable2.getValueAt(i, 0)));
                ps.setString(3,String.valueOf(jTable2.getValueAt(i, 2)));
                ps.setString(4,String.valueOf(jTable2.getValueAt(i, 3)));
                ps.setString(5,String.valueOf(jTable2.getValueAt(i, 4)));
                ps.setString(6,String.valueOf(jTable2.getValueAt(i, 5)));
                ps.executeUpdate();
            } catch (SQLException ex) {
                Logger.getLogger(CreateCheck.class.getName()).log(Level.SEVERE, null, ex);
            }
            int existingQuantity = 0;
            try {
                PreparedStatement ps;
                ResultSet rs;
                ps = con.prepareStatement("SELECT quantity FROM store_product WHERE id = ?");
                ps.setString(1, String.valueOf(jTable2.getValueAt(i, 0)));
                rs = ps.executeQuery();
                if (rs.next()) {
                    existingQuantity = rs.getInt("quantity");
                }
            } catch (SQLException ex) {
                Logger.getLogger(CreateCheck.class.getName()).log(Level.SEVERE, null, ex);
            }
            
            
            
            try {
                PreparedStatement ps;
                ps = con.prepareStatement("UPDATE store_product SET quantity = ? WHERE id = ?");
                int quantity = Integer.parseInt(String.valueOf(jTable2.getValueAt(i, 4)));
                int finalQuantity = existingQuantity - quantity;
                
                ps.setString(1,String.valueOf(finalQuantity));
                ps.setString(2, String.valueOf(jTable2.getValueAt(i, 0)));
                ps.executeUpdate();
                
                
                clientAdded = false;
                clientCard = null;
            } catch (SQLException ex) {
                Logger.getLogger(CreateCheck.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
                DefaultTableModel dm1 = (DefaultTableModel)jTable2.getModel();
                while(dm1.getRowCount() > 0) {
                    dm1.removeRow(0);
                }
                DefaultTableModel dm2 = (DefaultTableModel)jTable3.getModel();
                
                while(dm2.getRowCount() > 0) {
                    dm2.removeRow(0);
                }
        }
        
        
    }//GEN-LAST:event_makeCheckClick

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CreateCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CreateCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CreateCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CreateCheck.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CreateCheck().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JButton makeCheck;
    // End of variables declaration//GEN-END:variables
}
